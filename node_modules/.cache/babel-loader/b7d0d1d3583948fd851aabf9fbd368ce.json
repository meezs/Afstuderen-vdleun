{"ast":null,"code":"var _jsxFileName = \"D:\\\\Afstuderen\\\\react-admin-dashboard\\\\src\\\\scenes\\\\invoices\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, useTheme } from \"@mui/material\";\nimport Header from \"../../components/Header\";\nimport { tokens } from \"../../theme\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LiquidTanks = () => {\n  _s();\n\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode); // State for three water levels (0 to 100)\n\n  const [waterLevels, setWaterLevels] = useState([75, 50, 25]); // Initial levels for each tank\n\n  const [isPumping, setIsPumping] = useState([false, false, false]); // State to manage pump actions\n  // Effect to decrease water level for each tank when pumping\n\n  useEffect(() => {\n    const intervals = isPumping.map((pump, index) => {\n      if (pump && waterLevels[index] > 0) {\n        return setInterval(() => {\n          setWaterLevels(prevLevels => {\n            const newLevels = [...prevLevels];\n            newLevels[index] = Math.max(newLevels[index] - 1, 0); // Decrease water level\n\n            return newLevels;\n          });\n        }, 100); // Adjust speed of decrease (100ms)\n      }\n\n      return null; // No interval if not pumping\n    });\n    return () => {\n      intervals.forEach(interval => {\n        if (interval) clearInterval(interval); // Cleanup on unmount or when pumping state changes\n      });\n    };\n  }, [isPumping, waterLevels]);\n\n  const handlePumpButtonClick = index => {\n    setIsPumping(prev => {\n      const newPumpStates = [...prev];\n      newPumpStates[index] = !newPumpStates[index]; // Toggle pumping state for specific tank\n\n      return newPumpStates;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: \"20px\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Tanks\",\n      subtitle: \"All liquid holding tanks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), waterLevels.map((waterLevel, index) => /*#__PURE__*/_jsxDEV(Box, {\n      m: \"40px 0 0 0\",\n      height: 500 // Outer box height\n      ,\n      width: 500 // Outer box width\n      ,\n      display: \"flex\" // Corrected display property\n      ,\n      alignItems: \"flex-end\" // Aligns inner box to the bottom\n      ,\n      justifyContent: \"center\" // Center items horizontally\n      ,\n      border: \"1px solid\" // Optional: Add a border around the outer box\n      ,\n      borderColor: colors.grey[300] // Border color\n      ,\n      borderRadius: \"8px\" // Rounded corners for the outer box\n      ,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        bgcolor: colors.primary[600] // Use theme color for background\n        ,\n        color: colors.grey[100] // Set text color\n        ,\n        height: `${waterLevel}%` // Height based on water level percentage\n        ,\n        width: \"100%\" // Full width of the container\n        ,\n        borderRadius: \"8px\" // Rounded corners for the inner box\n        ,\n        boxShadow: 3 // Add some shadow\n        ,\n        textAlign: \"center\" // Center text inside the box\n        ,\n        display: \"flex\" // Use flexbox for inner box\n        ,\n        alignItems: \"center\" // Center text vertically\n        ,\n        justifyContent: \"center\" // Center text horizontally\n        ,\n        children: [\"Water Level: \", waterLevel.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        mt: \"20px\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: isPumping[index] ? \"error\" : \"primary\" // Change button color based on state\n          ,\n          variant: \"contained\",\n          onClick: () => handlePumpButtonClick(index),\n          children: isPumping[index] ? \"Stop Pump\" : \"Run Pump\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LiquidTanks, \"/Ihur2qnWWC9mizikyK5RG5RjZI=\", false, function () {\n  return [useTheme];\n});\n\n_c = LiquidTanks;\nexport default LiquidTanks;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiquidTanks\");","map":{"version":3,"names":["Box","Button","useTheme","Header","tokens","useEffect","useState","LiquidTanks","theme","colors","palette","mode","waterLevels","setWaterLevels","isPumping","setIsPumping","intervals","map","pump","index","setInterval","prevLevels","newLevels","Math","max","forEach","interval","clearInterval","handlePumpButtonClick","prev","newPumpStates","waterLevel","grey","primary","toFixed"],"sources":["D:/Afstuderen/react-admin-dashboard/src/scenes/invoices/index.jsx"],"sourcesContent":["import { Box, Button, useTheme } from \"@mui/material\";\r\nimport Header from \"../../components/Header\";\r\nimport { tokens } from \"../../theme\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst LiquidTanks = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n\r\n  // State for three water levels (0 to 100)\r\n  const [waterLevels, setWaterLevels] = useState([75, 50, 25]); // Initial levels for each tank\r\n  const [isPumping, setIsPumping] = useState([false, false, false]); // State to manage pump actions\r\n\r\n  // Effect to decrease water level for each tank when pumping\r\n  useEffect(() => {\r\n    const intervals = isPumping.map((pump, index) => {\r\n      if (pump && waterLevels[index] > 0) {\r\n        return setInterval(() => {\r\n          setWaterLevels((prevLevels) => {\r\n            const newLevels = [...prevLevels];\r\n            newLevels[index] = Math.max(newLevels[index] - 1, 0); // Decrease water level\r\n            return newLevels;\r\n          });\r\n        }, 100); // Adjust speed of decrease (100ms)\r\n      }\r\n      return null; // No interval if not pumping\r\n    });\r\n\r\n    return () => {\r\n      intervals.forEach((interval) => {\r\n        if (interval) clearInterval(interval); // Cleanup on unmount or when pumping state changes\r\n      });\r\n    };\r\n  }, [isPumping, waterLevels]);\r\n\r\n  const handlePumpButtonClick = (index) => {\r\n    setIsPumping((prev) => {\r\n      const newPumpStates = [...prev];\r\n      newPumpStates[index] = !newPumpStates[index]; // Toggle pumping state for specific tank\r\n      return newPumpStates;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box m=\"20px\">\r\n      <Header title=\"Tanks\" subtitle=\"All liquid holding tanks\" />\r\n      {waterLevels.map((waterLevel, index) => (\r\n        <Box\r\n          key={index}\r\n          m=\"40px 0 0 0\"\r\n          height={500} // Outer box height\r\n          width={500} // Outer box width\r\n          display=\"flex\" // Corrected display property\r\n          alignItems=\"flex-end\" // Aligns inner box to the bottom\r\n          justifyContent=\"center\" // Center items horizontally\r\n          border=\"1px solid\" // Optional: Add a border around the outer box\r\n          borderColor={colors.grey[300]} // Border color\r\n          borderRadius=\"8px\" // Rounded corners for the outer box\r\n        >\r\n          <Box\r\n            bgcolor={colors.primary[600]} // Use theme color for background\r\n            color={colors.grey[100]} // Set text color\r\n            height={`${waterLevel}%`} // Height based on water level percentage\r\n            width=\"100%\" // Full width of the container\r\n            borderRadius=\"8px\" // Rounded corners for the inner box\r\n            boxShadow={3} // Add some shadow\r\n            textAlign=\"center\" // Center text inside the box\r\n            display=\"flex\" // Use flexbox for inner box\r\n            alignItems=\"center\" // Center text vertically\r\n            justifyContent=\"center\" // Center text horizontally\r\n          >\r\n            Water Level: {waterLevel.toFixed(2)}%\r\n          </Box>\r\n          <Box display=\"flex\" justifyContent=\"center\" mt=\"20px\">\r\n            <Button \r\n              color={isPumping[index] ? \"error\" : \"primary\"} // Change button color based on state\r\n              variant=\"contained\" \r\n              onClick={() => handlePumpButtonClick(index)}\r\n            >\r\n              {isPumping[index] ? \"Stop Pump\" : \"Run Pump\"}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LiquidTanks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}