{"ast":null,"code":"var _jsxFileName = \"D:\\\\Afstuderen\\\\react-admin-dashboard\\\\src\\\\data\\\\mockData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Team = () => {\n  _s();\n\n  const [mockDataTeam, setMockDataTeam] = useState([]);\n\n  const readExcel = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]]; // Get data from the specific cells (A2, B2, etc.)\n\n      const rows = [];\n\n      for (let i = 2; i <= 10; i++) {\n        var _worksheet, _worksheet2, _worksheet3, _worksheet4, _worksheet5, _worksheet6;\n\n        // Adjust 10 to the number of rows you want to read\n        const id = (_worksheet = worksheet[`A${i}`]) === null || _worksheet === void 0 ? void 0 : _worksheet.v; // Cell A2, A3, etc.\n\n        const name = (_worksheet2 = worksheet[`B${i}`]) === null || _worksheet2 === void 0 ? void 0 : _worksheet2.v; // Cell B2, B3, etc.\n\n        const type = (_worksheet3 = worksheet[`C${i}`]) === null || _worksheet3 === void 0 ? void 0 : _worksheet3.v; // Cell C2, C3, etc.\n\n        const status = (_worksheet4 = worksheet[`D${i}`]) === null || _worksheet4 === void 0 ? void 0 : _worksheet4.v; // Cell D2, D3, etc.\n\n        const data = (_worksheet5 = worksheet[`E${i}`]) === null || _worksheet5 === void 0 ? void 0 : _worksheet5.v; // Cell E2, E3, etc.\n\n        const amp = (_worksheet6 = worksheet[`F${i}`]) === null || _worksheet6 === void 0 ? void 0 : _worksheet6.v; // Cell F2, F3, etc.\n\n        if (id && name) {\n          // Only push if id and name exist\n          rows.push({\n            id,\n            name,\n            Type: type,\n            ID: id,\n            Status: status,\n            Data: data,\n            amp\n          });\n        }\n      }\n\n      setMockDataTeam(rows);\n    };\n\n    reader.readAsArrayBuffer(file);\n  }; // Handle file upload\n\n\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n\n    if (file) {\n      readExcel(file);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: mockDataTeam.map(member => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: member.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", member.Type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", member.Status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Data: \", member.Data]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Amp: \", member.amp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, member.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Team, \"56ZgNea3cjNgBTK1u7jKGdWJbu8=\");\n\n_c = Team;\nexport default Team;\n\nvar _c;\n\n$RefreshReg$(_c, \"Team\");","map":{"version":3,"names":["React","useEffect","useState","XLSX","Team","mockDataTeam","setMockDataTeam","readExcel","file","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","read","type","worksheet","Sheets","SheetNames","rows","i","id","v","name","status","amp","push","Type","ID","Status","Data","readAsArrayBuffer","handleFileChange","event","files","map","member"],"sources":["D:/Afstuderen/react-admin-dashboard/src/data/mockData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Team = () => {\r\n    const [mockDataTeam, setMockDataTeam] = useState([]);\r\n\r\n    const readExcel = (file) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            const data = new Uint8Array(e.target.result);\r\n            const workbook = XLSX.read(data, { type: 'array' });\r\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n\r\n            // Get data from the specific cells (A2, B2, etc.)\r\n            const rows = [];\r\n            for (let i = 2; i <= 10; i++) { // Adjust 10 to the number of rows you want to read\r\n                const id = worksheet[`A${i}`]?.v; // Cell A2, A3, etc.\r\n                const name = worksheet[`B${i}`]?.v; // Cell B2, B3, etc.\r\n                const type = worksheet[`C${i}`]?.v; // Cell C2, C3, etc.\r\n                const status = worksheet[`D${i}`]?.v; // Cell D2, D3, etc.\r\n                const data = worksheet[`E${i}`]?.v; // Cell E2, E3, etc.\r\n                const amp = worksheet[`F${i}`]?.v; // Cell F2, F3, etc.\r\n\r\n                if (id && name) { // Only push if id and name exist\r\n                    rows.push({\r\n                        id,\r\n                        name,\r\n                        Type: type,\r\n                        ID: id,\r\n                        Status: status,\r\n                        Data: data,\r\n                        amp,\r\n                    });\r\n                }\r\n            }\r\n            setMockDataTeam(rows);\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n    };\r\n\r\n    // Handle file upload\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            readExcel(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileChange} />\r\n            <div>\r\n                {mockDataTeam.map((member) => (\r\n                    <div key={member.id}>\r\n                        <h3>{member.name}</h3>\r\n                        <p>Type: {member.Type}</p>\r\n                        <p>Status: {member.Status}</p>\r\n                        <p>Data: {member.Data}</p>\r\n                        <p>Amp: {member.amp}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Team;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}